generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id               Int              @id @default(autoincrement())
  clerkId          String           @unique // Clerk user ID
  fullName         String
  email            String           @unique
  age              Int?
  phoneNumber      String?          @unique
  cnic             String?          @unique
  isVerified       Boolean          @default(false)
  profileImageUrl  String?
  userRole         UserRole         @default(USER)
  paymentInfo      PaymentInfo?
  location         Json?            // { lat: float, lng: float }
  liveLocation     Json?            // { lat, lng, timestamp }
  rating           Float            @default(0)      // average rating score (0-5)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  history          Json?            // optional logs or snapshots
    sessions        Session[]      @relation("UserSessions")
  listings         ItemListing[]
  exchangesGiven   Exchange[]       @relation("ExchangesGiven")
  exchangesReceived Exchange[]      @relation("ExchangesReceived")
  payments         Payment[]
  borrowRequests   BorrowRequest[]  @relation("BorrowerRequests")
  borrowLendings   BorrowRequest[]  @relation("LenderRequests")
  ratingsGiven     Rating[]         @relation("RatingsGiven")
  ratingsReceived  Rating[]         @relation("RatingsReceived")
  reportsFiled     Report[]         @relation("ReportsFiled")
  reportsAgainst   Report[]         @relation("ReportsAgainst")
  notifications    Notification[]

  eventsHosted     Event[] @relation("EventHosts")
  eventRegistrations EventRegistration[]

  // Chat related relations
  conversationsSent     Conversation[] @relation("UserConversationsSent")
  conversationsReceived Conversation[] @relation("UserConversationsReceived")
  messagesSent          Message[]      @relation("UserMessagesSent")
  messagesReceived      Message[]      @relation("UserMessagesReceived")

  // Zone relation
  zone                 Zone?          @relation(fields: [zoneId], references: [id])
  zoneId               Int?
}


model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation("UserSessions", fields: [userId], references: [clerkId], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}
model Conversation {
  id            Int       @id @default(autoincrement())
  participantA  User      @relation("UserConversationsSent", fields: [participantAId], references: [id])
  participantAId Int
  participantB  User      @relation("UserConversationsReceived", fields: [participantBId], references: [id])
  participantBId Int

  itemListing   ItemListing? @relation(fields: [itemListingId], references: [id])
  itemListingId Int?

  exchange      Exchange?   @relation(fields: [exchangeId], references: [id])
  exchangeId    Int?

  messages      Message[]

  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([participantAId, participantBId])
  @@index([participantAId])
  @@index([participantBId])
  @@index([itemListingId])
  @@index([exchangeId])
}

model Message {
  id              Int       @id @default(autoincrement())
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  conversationId  Int

  sender          User      @relation("UserMessagesSent", fields: [senderId], references: [id])
  senderId        Int

  receiver        User      @relation("UserMessagesReceived", fields: [receiverId], references: [id])
  receiverId      Int

  content         String
  isRead          Boolean   @default(false)
  sentAt          DateTime  @default(now())

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
}

model PaymentInfo {
  id              Int          @id @default(autoincrement())
  user            User         @relation(fields: [userId], references: [id])
  userId          Int          @unique
  stripeCustomerId String?      // Stripe ID for payments
  jazzCashId      String?      // JazzCash user id
  easypaisaId     String?      // Easypaisa user id
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Payment {
  id               Int            @id @default(autoincrement())
  user             User           @relation(fields: [userId], references: [id])
  userId           Int
  provider         PaymentProvider
  providerPaymentId String
  amountCents      Int
  currency         Currency
  status           PaymentStatus
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([userId])
  @@index([provider])
  @@index([status])
}

enum PaymentProvider {
  STRIPE
  JAZZCASH
  EASYPASA
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum Currency {
  PKR
  USD
  EUR
  GBP
  // extend as needed
}

model Zone {
  id           Int       @id @default(autoincrement())
  name         String    // e.g., "University Campus", "Mohallah 1"
  centerLat    Float
  centerLng    Float
  radiusMeters Int       @default(1000) // 1 km radius default
  createdAt    DateTime  @default(now())

  users        User[]
  listings     ItemListing[]
  exchanges    Exchange[]
  borrowRequests BorrowRequest[]
  events       Event[]

  @@index([centerLat, centerLng])
}

model ItemListing {
  id              Int           @id @default(autoincrement())
  owner           User          @relation(fields: [ownerId], references: [id])
  ownerId         Int
  zone            Zone          @relation(fields: [zoneId], references: [id])
  zoneId          Int
  name            String
  description     String
  condition       ItemCondition
  category        ItemCategory
  images          ItemImage[]
  availability    Availability  @relation(fields: [availabilityId], references: [id])
  availabilityId  Int @unique
  priceModel      PriceModel
  priceCents      Int           // base or starting price in cents
  additionalNote  String?
  isExchangeOnly  Boolean       @default(false) // lending/selling vs only exchange
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  exchangesGiven  Exchange[]    @relation("ItemsExchangedGiven")
  exchangesReceived Exchange[]   @relation("ItemsExchangedReceived")
  borrowRequests  BorrowRequest[]

  // Conversation relation
  conversations   Conversation[]

  @@index([ownerId])
  @@index([zoneId])
  @@index([priceModel])
  @@index([category])
  @@index([isExchangeOnly])
}

enum ItemCondition {
  LIKE_NEW
  GOOD
  USED
  POOR
  DAMAGED
}

enum ItemCategory {
  CHARGER
  SPORTS_EQUIPMENT
  TOOL
  ELECTRONIC
  FURNITURE
  BOOK
  CLOTHING
  ACCESSORY
  OTHER
}

model ItemImage {
  id          Int          @id @default(autoincrement())
  item        ItemListing  @relation(fields: [itemId], references: [id])
  itemId      Int
  url         String
  isPrimary   Boolean      @default(false)
  createdAt   DateTime     @default(now())

  @@index([itemId])
  @@index([isPrimary])
}

model Availability {
  id          Int       @id @default(autoincrement())
  startTime   DateTime
  endTime     DateTime?

  item        ItemListing?

  @@index([startTime])
  @@index([endTime])
}

enum PriceModel {
  FIXED_TIME
  USAGE_BASED
}

model Exchange {
  id               Int          @id @default(autoincrement())

  giver            User         @relation("ExchangesGiven", fields: [giverId], references: [id])
  giverId          Int

  receiver         User         @relation("ExchangesReceived", fields: [receiverId], references: [id])
  receiverId       Int

  itemGiven        ItemListing  @relation("ItemsExchangedGiven", fields: [itemGivenId], references: [id])
  itemGivenId      Int

  itemReceived     ItemListing? @relation("ItemsExchangedReceived", fields: [itemReceivedId], references: [id])
  itemReceivedId   Int?

  zone             Zone         @relation(fields: [zoneId], references: [id])
  zoneId           Int

  status           ExchangeStatus  @default(PENDING)
  agreedAt         DateTime?
  completedAt      DateTime?
  cancelledAt      DateTime?

  additionalNote   String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  borrowLocationTrackings BorrowLocationTracking[]

  // Conversation and Rating relations
  conversations   Conversation[]
  ratings         Rating[]

  @@index([giverId])
  @@index([receiverId])
  @@index([zoneId])
  @@index([status])
}

enum ExchangeStatus {
  PENDING
  AGREED
  COMPLETED
  CANCELLED
}

// New model for one-way borrow requests (no exchange)
model BorrowRequest {
  id              Int          @id @default(autoincrement())
  item            ItemListing  @relation(fields: [itemId], references: [id])
  itemId          Int

  borrower        User         @relation("BorrowerRequests", fields: [borrowerId], references: [id])
  borrowerId      Int

  lender          User         @relation("LenderRequests", fields: [lenderId], references: [id])
  lenderId        Int

  zone            Zone         @relation(fields: [zoneId], references: [id])
  zoneId          Int

  status          BorrowRequestStatus @default(PENDING)
  termsAccepted   Boolean      @default(false)
  requestedFrom   DateTime
  requestedTo     DateTime
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  borrowLocationTrackings BorrowLocationTracking[]
  ratings                Rating[]    // ratings for this borrow transaction

  @@index([borrowerId])
  @@index([lenderId])
  @@index([zoneId])
  @@index([status])
}

enum BorrowRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
}

model BorrowLocationTracking {
  id           Int       @id @default(autoincrement())
  borrowRequest BorrowRequest? @relation(fields: [borrowRequestId], references: [id])
  borrowRequestId Int?

  exchange     Exchange? @relation(fields: [exchangeId], references: [id])
  exchangeId   Int?

  latitude     Float
  longitude    Float
  timestamp    DateTime  @default(now())

  @@index([borrowRequestId])
  @@index([exchangeId])
  @@index([timestamp])
}

model Rating {
  id           Int      @id @default(autoincrement())
  rater        User     @relation("RatingsGiven", fields: [raterId], references: [id])
  raterId      Int
  ratee        User     @relation("RatingsReceived", fields: [rateeId], references: [id])
  rateeId      Int
  borrowRequest BorrowRequest? @relation(fields: [borrowRequestId], references: [id])
  borrowRequestId Int?

  exchange     Exchange? @relation(fields: [exchangeId], references: [id])
  exchangeId   Int?

  rating       Int      @default(5) @db.SmallInt  // 1-5 scale
  feedback     String?
  createdAt    DateTime @default(now())

  @@index([raterId])
  @@index([rateeId])
}

model Report {
  id           Int      @id @default(autoincrement())
  reportedBy   User     @relation("ReportsFiled", fields: [reportedById], references: [id])
  reportedById Int
  reportedUser User     @relation("ReportsAgainst", fields: [reportedUserId], references: [id])
  reportedUserId Int
  reason       String
  status       ReportStatus @default(OPEN)
  adminNotes   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([reportedById])
  @@index([reportedUserId])
  @@index([status])
}

enum ReportStatus {
  OPEN
  REVIEWED
  RESOLVED
  REJECTED
}

model Notification {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  title        String
  message      String
  isRead       Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@index([userId])
  @@index([isRead])
}

model Event {
  id            Int          @id @default(autoincrement())
  host          User         @relation("EventHosts", fields: [hostId], references: [id])
  hostId        Int

  title         String
  description   String
  category      EventCategory
  location      Json         // { lat: Float, lng: Float, address: String? }
  startTime     DateTime
  endTime       DateTime

  isPaid        Boolean      @default(false)
  priceCents    Int?
  currency      Currency?

  registrants   EventRegistration[]

  // Zone relation
  zone          Zone?        @relation(fields: [zoneId], references: [id])
  zoneId        Int?

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([hostId])
  @@index([category])
  @@index([startTime])
  @@index([zoneId])
}

model EventRegistration {
  id           Int                 @id @default(autoincrement())
  event        Event               @relation(fields: [eventId], references: [id])
  eventId      Int

  user         User                @relation(fields: [userId], references: [id])
  userId       Int

  registeredAt DateTime            @default(now())
  status       RegistrationStatus  @default(PENDING)

  @@unique([eventId, userId])
  @@index([userId])
  @@index([status])
}

enum EventCategory {
  SPORTS
  COMMUNITY
  EDUCATION
  ENTERTAINMENT
  OTHER
}

enum RegistrationStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
